[{"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\index.js":"1","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\reportWebVitals.js":"2","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\App.js":"3","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\main\\Main.jsx":"4","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\config\\tokenAuth.jsx":"5","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\sections\\intro.jsx":"6","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\config\\axios.jsx":"7","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\layout\\topBar.jsx":"8","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\constants\\constants.jsx":"9","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\context\\game\\gameContext.jsx":"10","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\context\\game\\gameState.jsx":"11","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\context\\game\\gameReducer.jsx":"12","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\types\\index.jsx":"13","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\sections\\game.jsx":"14","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\sections\\scores.jsx":"15","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\helpers\\shuffler.jsx":"16","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\layout\\loading.jsx":"17"},{"size":500,"mtime":1606344321988,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1606344321988,"results":"20","hashOfConfig":"19"},{"size":189,"mtime":1610900444668,"results":"21","hashOfConfig":"19"},{"size":781,"mtime":1610909784718,"results":"22","hashOfConfig":"19"},{"size":292,"mtime":1610899125494,"results":"23","hashOfConfig":"19"},{"size":2549,"mtime":1610921795853,"results":"24","hashOfConfig":"19"},{"size":148,"mtime":1610911635996,"results":"25","hashOfConfig":"19"},{"size":505,"mtime":1610901564796,"results":"26","hashOfConfig":"19"},{"size":336,"mtime":1610899914494,"results":"27","hashOfConfig":"19"},{"size":110,"mtime":1610904679720,"results":"28","hashOfConfig":"19"},{"size":3127,"mtime":1610921815078,"results":"29","hashOfConfig":"19"},{"size":1062,"mtime":1610918197228,"results":"30","hashOfConfig":"19"},{"size":325,"mtime":1610918134670,"results":"31","hashOfConfig":"19"},{"size":3097,"mtime":1610921207920,"results":"32","hashOfConfig":"19"},{"size":2118,"mtime":1610923125430,"results":"33","hashOfConfig":"19"},{"size":237,"mtime":1610913785564,"results":"34","hashOfConfig":"19"},{"size":400,"mtime":1610919832506,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1enikms",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\index.js",[],["75","76"],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\reportWebVitals.js",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\App.js",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\main\\Main.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\config\\tokenAuth.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\sections\\intro.jsx",["77"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { CATEGORIES } from \"../../constants/constants\";\r\nimport GameContext from \"../../context/game/gameContext\";\r\nimport TopBar from \"../layout/topBar\";\r\n\r\nconst Intro = () => {\r\n  const history = useHistory();\r\n  const { addUserInfo, showError, errorForm } = useContext(GameContext);\r\n\r\n  const [userInfo, saveUserInfo] = useState({\r\n    nickName: \"\",\r\n    category: \"\",\r\n  });\r\n\r\n  const routeChange = () => { \r\n    let path = `game`; \r\n    history.push(path);\r\n  }\r\n\r\n  const onChangeUserInfo = (e) => {\r\n    saveUserInfo({\r\n      ...userInfo,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const submitUserInfo = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (userInfo.nickName === \"\" || userInfo.category === \"\") {\r\n      showError(\"please provide all data\");\r\n      return;\r\n    }\r\n    addUserInfo(userInfo);\r\n    routeChange();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TopBar></TopBar>\r\n      <div className=\"big-container flex-row\">\r\n        <div className=\"section flex-column\">\r\n          <div className=\"title yellow\">\r\n            Wellcome to triviapp, the competitive trivia application for\r\n            everyone\r\n          </div>\r\n          <form className=\"flex-column box bg-yellow\" onSubmit={submitUserInfo}>\r\n            <div className=\"flex-row input-container\">\r\n              <div className=\"label pink\">Nickname: </div>\r\n              <input\r\n                type=\"text\"\r\n                name=\"nickName\"\r\n                value={userInfo.nickName}\r\n                onChange={onChangeUserInfo}\r\n                className=\"input bg-pink yellow\"\r\n              />\r\n            </div>\r\n            <div className=\"flex-row input-container\">\r\n              <div className=\"label pink\">Category: </div>\r\n              <select\r\n                className=\"input bg-pink yellow select\"\r\n                name=\"category\"\r\n                value={userInfo.category}\r\n                onChange={onChangeUserInfo}\r\n              >\r\n                <option disabled value=''>Select</option>\r\n                {Object.entries(CATEGORIES).map((c) => (\r\n                  <option key={c[1]} value={c[1]}>{c[0]}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            {errorForm != \"\" ? <p className=\"error\">{errorForm}</p> : null}\r\n            <button className=\"button pink border-pink bg-yellow\">START</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\config\\axios.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\layout\\topBar.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\constants\\constants.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\context\\game\\gameContext.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\context\\game\\gameState.jsx",["78"],"import React, { useReducer } from \"react\";\r\nimport { QUESTION_QUANTITY } from \"../../constants/constants\";\r\nimport {\r\n  ADD_USER_INFO,\r\n  GET_QUESTIONS,\r\n  GET_SCORES,\r\n  LOADING_SERVICE,\r\n  SET_TIME_END,\r\n  SET_TIME_START,\r\n  VALIDATE_FORM,\r\n} from \"../../types\";\r\nimport GameContext from \"./gameContext\";\r\nimport gameReducer from \"./gameReducer\";\r\nimport axios from \"axios\";\r\nimport clientAxios from \"../../config/axios\";\r\n\r\nconst TRIVIA_API_URL = \"https://opentdb.com/api.php\";\r\n\r\nconst GameState = (props) => {\r\n  const initialState = {\r\n    userInfo: {},\r\n    questions: {},\r\n    errorForm: \"\",\r\n    timeStart: null,\r\n    timeEnd: null,\r\n    loadingService: false,\r\n    results: {},\r\n    scores: {}\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  const showError = (error) => {\r\n    dispatch({\r\n      type: VALIDATE_FORM,\r\n      payload: error,\r\n    });\r\n  };\r\n\r\n  const addUserInfo = (userInfo) => {\r\n    dispatch({\r\n      type: ADD_USER_INFO,\r\n      payload: userInfo,\r\n    });\r\n  };\r\n\r\n  const getQuestions = async () => {\r\n    try {\r\n      dispatch({\r\n        type: LOADING_SERVICE,\r\n      });\r\n      const result = await axios.get(\r\n        `${TRIVIA_API_URL}?amount=${QUESTION_QUANTITY}&category=${state.userInfo.category}&type=multiple`\r\n      );\r\n      dispatch({\r\n        type: GET_QUESTIONS,\r\n        payload: result.data,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const getScores = async () => {\r\n    try {\r\n      dispatch({\r\n        type: LOADING_SERVICE,\r\n      });\r\n      const result = await clientAxios.get(\"/api/scores\");\r\n      result.data.scores.reverse();\r\n      dispatch({\r\n        type: GET_SCORES,\r\n        payload: result.data,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const setTimeStart = () => {\r\n    dispatch({\r\n      type: SET_TIME_START,\r\n      payload: new Date(),\r\n    });\r\n  };\r\n\r\n  const setTimeEnd = () => {\r\n    dispatch({\r\n      type: SET_TIME_END,\r\n      payload: new Date(),\r\n    });\r\n  };\r\n\r\n  const saveResults = async (results,callback) => {\r\n    const dataSave = {\r\n      nickname: state.userInfo.nickName,\r\n      category: state.userInfo.category,\r\n      trivia_duration: parseFloat(\"\" + (Math.abs(state.timeStart - new Date()) / (1000 * 60 ))).toFixed(2),\r\n      correct_answers: \"\" + results,\r\n    };\r\n    try {\r\n      dispatch({\r\n        type: LOADING_SERVICE,\r\n      });\r\n      const result = await clientAxios.post(\"/api/scores\", dataSave);\r\n      callback();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        userInfo: state.userInfo,\r\n        errorForm: state.errorForm,\r\n        questions: state.questions,\r\n        loadingService: state.loadingService,\r\n        results: state.results,\r\n        scores: state.scores,\r\n        setTimeStart,\r\n        setTimeEnd,\r\n        saveResults,\r\n        addUserInfo,\r\n        getQuestions,\r\n        getScores,\r\n        showError,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GameState;\r\n","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\context\\game\\gameReducer.jsx",["79"],"import { ADD_USER_INFO, GET_QUESTIONS, GET_SCORES, LOADING_SERVICE, SET_TIME_END, SET_TIME_START, VALIDATE_FORM } from \"../../types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case VALIDATE_FORM:\r\n      return {\r\n        ...state,\r\n        errorForm: action.payload,\r\n      };\r\n    case ADD_USER_INFO:\r\n      return {\r\n        ...state,\r\n        userInfo: action.payload,\r\n        errorForm: \"\",\r\n      };\r\n    case GET_QUESTIONS:\r\n      return {\r\n        ...state,\r\n        loadingService: false,\r\n        questions: action.payload,\r\n      };\r\n    case GET_SCORES:\r\n      return {\r\n        ...state,\r\n        loadingService: false,\r\n        scores: action.payload,\r\n      };\r\n    case LOADING_SERVICE:\r\n      return {\r\n        ...state,\r\n        loadingService: true,\r\n      };\r\n    case SET_TIME_START:\r\n      return {\r\n        ...state,\r\n        timeStart: action.payload,\r\n      };\r\n    case SET_TIME_END:\r\n      return {\r\n        ...state,\r\n        timeEnd: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\types\\index.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\sections\\game.jsx",["80","81","82","83","84"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { QUESTION_QUANTITY } from \"../../constants/constants\";\r\nimport GameContext from \"../../context/game/gameContext\";\r\nimport { shuffleArray } from \"../../helpers/shuffler\";\r\nimport Loading from \"../layout/loading\";\r\nimport TopBar from \"../layout/topBar\";\r\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\n\r\nfunction Game() {\r\n  const {\r\n    userInfo,\r\n    questions,\r\n    getQuestions,\r\n    loadingService,\r\n    setTimeStart,\r\n    setTimeEnd,\r\n    saveResults,\r\n  } = useContext(GameContext);\r\n  const history = useHistory();\r\n  const [actualQuestion, saveActualQuestion] = useState({});\r\n  const [questionNumber, saveQuestionNumber] = useState(0);\r\n  const [correctAnswers, saveCorrectAnswers] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(\"service changed\", { loadingService, questions });\r\n    if (!userInfo.category) {\r\n      let path = ``;\r\n      history.push(path);\r\n      return;\r\n    }\r\n    if (!questions.results) {\r\n      console.log({ questions });\r\n      getQuestions();\r\n      setTimeStart();\r\n    } else {\r\n      setActualQuestion(0);\r\n    }\r\n  }, [loadingService]);\r\n\r\n  const setActualQuestion = (num) => {\r\n    questions.results[num].answers = [\r\n      ...questions.results[num].incorrect_answers,\r\n      questions.results[num].correct_answer,\r\n    ];\r\n    shuffleArray(questions.results[num].answers);\r\n    saveActualQuestion(questions.results[num]);\r\n  };\r\n\r\n  const setNextQuestion = (selected) => {\r\n    if (questionNumber != QUESTION_QUANTITY) {\r\n      saveQuestionNumber(questionNumber + 1);\r\n      saveCorrectAnswers(\r\n        selected === actualQuestion.correct_answer\r\n          ? correctAnswers + 1\r\n          : correctAnswers\r\n      );\r\n      setActualQuestion(questionNumber);\r\n    } else {\r\n      setTimeEnd();\r\n      saveResults(correctAnswers, goToScores);\r\n    }\r\n  };\r\n\r\n  const goToScores = () => {\r\n      let path = `scores`;\r\n      history.push(path);\r\n  }\r\n\r\n  // const markup = (a) => {\r\n  //   let e = document.createElement('div');\r\n  //   e.innerHTML = a;\r\n  //   return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\r\n  // };\r\n\r\n  if (loadingService) {\r\n    return (<Loading></Loading>);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TopBar></TopBar>\r\n      <div className=\"big-container flex-row\">\r\n        <div className=\"section flex-column\">\r\n          <div className=\"title yellow\">\r\n            {questionNumber + 1}\r\n            {\". \"}\r\n            {ReactHtmlParser(actualQuestion.question)}\r\n          </div>\r\n          <div className=\"flex-column box bg-yellow\">\r\n            {actualQuestion.answers &&\r\n              actualQuestion.answers.map((a) => (\r\n                <p\r\n                  key={a}\r\n                  className=\"response-container pink\"\r\n                  onClick={() => setNextQuestion(a)}\r\n                >{ReactHtmlParser(a)}</p>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\sections\\scores.jsx",["85","86","87"],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\helpers\\shuffler.jsx",[],"C:\\personal\\HolaMundoChallenge\\trivias\\FrontEnd\\triviapp\\src\\components\\layout\\loading.jsx",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":73,"column":24,"nodeType":"94","messageId":"95","endLine":73,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":105,"column":13,"nodeType":"98","messageId":"99","endLine":105,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":3,"column":1,"nodeType":"102","endLine":46,"endColumn":3},{"ruleId":"96","severity":1,"message":"103","line":8,"column":27,"nodeType":"98","messageId":"99","endLine":8,"endColumn":39},{"ruleId":"96","severity":1,"message":"104","line":8,"column":41,"nodeType":"98","messageId":"99","endLine":8,"endColumn":61},{"ruleId":"96","severity":1,"message":"105","line":8,"column":63,"nodeType":"98","messageId":"99","endLine":8,"endColumn":74},{"ruleId":"106","severity":1,"message":"107","line":39,"column":6,"nodeType":"108","endLine":39,"endColumn":22,"suggestions":"109"},{"ruleId":"92","severity":1,"message":"93","line":51,"column":24,"nodeType":"94","messageId":"95","endLine":51,"endColumn":26},{"ruleId":"106","severity":1,"message":"110","line":23,"column":6,"nodeType":"108","endLine":23,"endColumn":22,"suggestions":"111"},{"ruleId":"96","severity":1,"message":"112","line":25,"column":9,"nodeType":"98","messageId":"99","endLine":25,"endColumn":20},{"ruleId":"92","severity":1,"message":"113","line":58,"column":77,"nodeType":"94","messageId":"95","endLine":58,"endColumn":79},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'processNodes' is defined but never used.","'convertNodeToElement' is defined but never used.","'htmlparser2' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getQuestions', 'history', 'questions', 'setActualQuestion', 'setTimeStart', and 'userInfo.category'. Either include them or remove the dependency array.","ArrayExpression",["116"],"React Hook useEffect has missing dependencies: 'getScores', 'history', 'scores.scores', and 'userInfo.category'. Either include them or remove the dependency array.",["117"],"'getCategory' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [getQuestions, history, loadingService, questions, setActualQuestion, setTimeStart, userInfo.category]",{"range":"122","text":"123"},"Update the dependencies array to be: [getScores, history, loadingService, scores.scores, userInfo.category]",{"range":"124","text":"125"},[1243,1259],"[getQuestions, history, loadingService, questions, setActualQuestion, setTimeStart, userInfo.category]",[635,651],"[getScores, history, loadingService, scores.scores, userInfo.category]"]